async def get_order_products(self, key: str) -> Dict[str, Any]:
    """
    Get all products associated with a given order.

    Args:
        key: The unique key (_key) of the order

    Returns:
        A dictionary with order info and a list of product documents
    """
    try:
        # First check if the order exists
        try:
            order = await self.get_by_key(key)
        except HTTPException as e:
            if e.status_code == 404:
                logger.warning(f"Order with key {key} not found")
                raise HTTPException(
                    status_code=404,
                    detail=f"Order with key {key} not found"
                )
            raise

        # Define the AQL query for finding products linked to this order
        query = '''
            LET order = DOCUMENT('orders/{0}')
            LET products = (
                FOR product, edge IN OUTBOUND order order_product
                    RETURN MERGE(product, {{ 
                        "quantity": edge.quantity,
                        "price": edge.price
                    }})
            )
            RETURN {{
                "order": {{
                    "_key": order._key,
                    "order_number": order.order_number
                }},
                "products": products
            }}
        '''.format(key)

        cursor = self.db.aql.execute(query)
        result = next(cursor, {"order": {}, "products": []})

        return result

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting products for order: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Error retrieving products for order: {str(e)}"
        )
