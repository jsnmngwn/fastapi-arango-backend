async def get_by_from(self, from_key: str) -> List[Dict[str, Any]]:
        """Get all edges from a specific {{ entity.connected_entities[0] }}"""
        try:
            from_id = f"{{ entity.connected_entities[0] }}/{from_key}"
            
            query = f"""
                FOR edge IN {self.collection_name}
                FILTER edge._from == @from_id
                RETURN edge
            """
            
            result = self.db.aql.execute(
                query, 
                bind_vars={"from_id": from_id}
            )
            
            return [doc for doc in result]
        except Exception as e:
            logger.error(f"Error fetching {{ entity.camel_name }} by from: {e}")
            raise HTTPException(status_code=500, detail=f"Error fetching {{ entity.camel_name }}: {str(e)}")
