async def update(self, key: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Update a {{ entity.camel_name }} by its key"""
        try:
            # Check if document exists
            existing_doc = self.db.collection(self.collection_name).get({"_key": key})
            if not existing_doc:
                raise HTTPException(status_code=404, detail=f"{{ entity.pascal_name }} with key {key} not found")
            
            # Handle edge fields for ArangoDB (convert from_id -> _from, to_id -> _to)
            {% if entity.is_edge %}
            if "from_id" in data:
                data["_from"] = data.pop("from_id")
            if "to_id" in data:
                data["_to"] = data.pop("to_id")
            {% endif %}
            
            # Create merged document with updated data
            updated_doc = existing_doc.copy()
            updated_doc.update(data)
            
            # Add updated timestamp
            updated_doc["updated_at"] = datetime.now(timezone.utc).isoformat()
            
            # Convert date objects to ISO format strings
            for field, value in list(updated_doc.items()):
                if isinstance(value, date):
                    updated_doc[field] = value.isoformat()
            
            # Remove any fields that shouldn't be modified
            for field in ["_id", "_rev"]:
                if field in updated_doc:
                    del updated_doc[field]
            
            # Make sure key stays consistent
            updated_doc["_key"] = key
            
            # Replace the document with the updated version
            result = self.db.collection(self.collection_name).replace(updated_doc, return_new=True)
            return result["new"]
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"Error updating {{ entity.camel_name }}: {e}")
            raise HTTPException(status_code=500, detail=f"Error updating {{ entity.camel_name }}: {str(e)}")
